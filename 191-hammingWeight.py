"""
191. 位1的个数
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。



提示：

请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。


进阶：

如果多次调用这个函数，你将如何优化你的算法？


示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。


提示：

输入必须是长度为 32 的 二进制串 。
"""
"""
方法一：内置函数
执行用时：40 ms, 在所有 Python3 提交中击败了64.32%的用户
内存消耗：14.6 MB, 在所有 Python3 提交中击败了17.98%的用户

class Solution:
    def hammingWeight(self, n: int) -> int:
        return bin(n).count("1")
"""
"""
方法二：累加法
累加二进制的最后一位，并将二进制右移直到n为0

执行用时：48 ms, 在所有 Python3 提交中击败了15.96%的用户
内存消耗：14.7 MB, 在所有 Python3 提交中击败了9.01%的用户
"""
class Solution:
    def hammingWeight(self, n: int) -> int:
        count = 0
        while n:
            count += n & 1
            n >>= 1
        return count


"""
方法三：位操作法
对于任意数字 n ，将 n 和 n - 1 做与运算，会把最后一个 1 的位变成 0 。
当数字变成 0 的时候，我们就知道它没有 1 的位了，此时返回答案。
示例：n=12，其二进制为1100，n-1为1011，n&(n-1)为1000，消掉了最后一个的1。
时间复杂度：O(1)，n为32位的数，操作次数为二进制中1的个数

执行用时：32 ms, 在所有 Python3 提交中击败了94.53%的用户
内存消耗：14.5 MB, 在所有 Python3 提交中击败了19.43%的用户
"""
class Solution:
    def hammingWeight(self, n: int) -> int:
        count = 0
        while n:
            n &= n-1
            count += 1
        return count


if __name__ == "__main__":
    A = 8
    s = Solution()
    print(s.hammingWeight(A))
