"""
553. 最优除法
给定一组正整数，相邻的整数之间将会进行浮点除法操作。例如， [2,3,4] -> 2 / 3 / 4 。

但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。
你需要找出怎么添加括号，才能得到最大的结果，并且返回相应的字符串格式的表达式。
你的表达式不应该含有冗余的括号。

示例：

输入: [1000,100,10,2]
输出: "1000/(100/10/2)"
解释:
1000/(100/10/2) = 1000/((100/10)/2) = 200
但是，以下加粗的括号 "1000/((100/10)/2)" 是冗余的，
因为他们并不影响操作的优先级，所以你需要返回 "1000/(100/10/2)"。

其他用例:
1000/(100/10)/2 = 50
1000/(100/(10/2)) = 50
1000/100/10/2 = 0.5
1000/100/(10/2) = 2
说明:

输入数组的长度在 [1, 10] 之间。
数组中每个元素的大小都在 [2, 1000] 之间。
每个测试用例只有一个最优除法解。
"""
"""
方法二：数学
思路
使用一些简单的数学技巧，我们可以找到解决这个问题的简单解法。
考虑到除法运算用分数 y/x来表示，其中分子 x 为被除数，分母 y 为除数，为了最大化 y/x，
应该使分子 x 尽可能的大，分母 y 尽可能的小。

假设当前的整数序列为 [nums_0,nums_1,⋯,nums_n−1]，
相邻元素相除形式为 [nums_0÷nums_1÷⋯÷nums_n−1]，最终的结果一定可以表达为分数的形式 y/x，
不论如何添加括号改变优先级可以知道分子 x 的最大值为 nums_0。
通过添加括号使得剩余的表达式 nums_1÷nums_2÷⋯÷nums_n−1构成的分子 y 最小即可。
由于数组 nums 中的每个元素都大于 1，因此通过直观的观察可以知道 y=nums_1÷nums_2÷⋯÷nums_n−1时值最小，
由上述结论可以知道当满足y/x= nums0÷(nums_1÷nums_2÷⋯÷nums_n−1)时，数组构成的表达式计算结果为最大。
"""
class Solution:
    def optimalDivision(self, nums: list) -> str:
        if len(nums) == 1:
            return str(nums[0])
        if len(nums) == 2:
            return str(nums[0]) + "/" + str(nums[1])
        return str(nums[0]) + "/(" + "/".join(map(str, nums[1:])) + ")"


if __name__ == "__main__":
    nums = [87,68,91,86,58,63,43,98,6,40]
    s = Solution()
    print(s.optimalDivision(nums))
