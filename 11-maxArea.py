"""
11. 盛最多水的容器
给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。
在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。
找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

说明：你不能倾斜容器。



示例 1：
      |
      |*****|
|     |     |
|  |  |     |
|__|__|__|__|
0  1  2  3  4

输入：[1,8,6,2,5,4,8,3,7]
输出：49
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
示例 2：

输入：height = [1,1]
输出：1
示例 3：

输入：height = [4,3,2,1,4]
输出：16
示例 4：

输入：height = [1,2,1]
输出：2


提示：

n == height.length
2 <= n <= 105
0 <= height[i] <= 104
"""

class Solution:
    """
    方法：双指针
    执行用时：200 ms, 在所有 Python3 提交中击败了44.47%的用户
    内存消耗：24.2 MB, 在所有 Python3 提交中击败了38.93%的用户

    证明：为什么双指针的做法是正确的？

    双指针代表了什么？
    双指针代表的是 可以作为容器边界的所有位置的范围。
    在一开始，双指针指向数组的左右边界，表示 数组中所有的位置都可以作为容器的边界，
    因为我们还没有进行过任何尝试。在这之后，我们每次将对应的数字较小的那个指针往另一个指针的方向移动一个位置，
    就表示我们认为这个指针不可能再作为容器的边界了。

    为什么对应的数字较小的那个指针不可能再作为容器的边界了？
    在上面的分析部分，我们对这个问题有了一点初步的想法。这里我们定量地进行证明。
    考虑第一步，假设当前左指针和右指针指向的数分别为 x 和 y，不失一般性，我们假设 x≤y。
    同时，两个指针之间的距离为 t。那么，它们组成的容器的容量为：min(x,y)∗t=x∗t

    我们可以断定，如果我们保持左指针的位置不变，那么无论右指针在哪里，这个容器的容量都不会超过 x∗t 了。
    注意这里右指针只能向左移动，因为 我们考虑的是第一步，也就是指针还指向数组的左右边界的时候。
    我们任意向左移动右指针，指向的数为 y1，两个指针之间的距离为 t1，那么显然有 t1<t，
    并且 min(x,y1)≤min(x,y)：
    如果 y1≤y，那么 min(x,y1)≤min(x,y)；
    如果 y1>y，那么 min(x,y1)=x=min(x,y)。

    因此有：min(x,y1)∗t1<min(x,y)∗t

    即无论我们怎么移动右指针，得到的容器的容量都小于移动前容器的容量。
    也就是说，这个左指针对应的数不会作为容器的边界了，那么我们就可以丢弃这个位置，
    将左指针向右移动一个位置，此时新的左指针于原先的右指针之间的左右位置，才可能会作为容器的边界。

    这样以来，我们将问题的规模减小了 1，被我们丢弃的那个位置就相当于消失了。
    此时的左右指针，就指向了一个新的、规模减少了的问题的数组的左右边界，因此，我们可以继续像之前 考虑第一步 那样考虑这个问题：

    求出当前双指针对应的容器的容量；

    对应数字较小的那个指针以后不可能作为容器的边界了，将其丢弃，并移动对应的指针。

    最后的答案是什么？

    答案就是我们每次以双指针为左右边界（也就是「数组」的左右边界）计算出的容量中的最大值。

    复杂度分析
    时间复杂度：O(N)O(N)，双指针总计最多遍历整个数组一次。
    空间复杂度：O(1)O(1)，只需要额外的常数级别的空间。
    """
    def maxArea(self, height):
        left, right = 0, len(height)-1
        max_area = -1
        while left < right:
            temp = min(height[left], height[right]) * (right - left)
            max_area = max(temp, max_area)

            if height[left] < height[right]:
                left += 1
            else:
                right -= 1
        return max_area


if __name__ == "__main__":
    A = [1,8,6,2,5,4,8,3,7]
    s = Solution()
    print(s.maxArea(A))
